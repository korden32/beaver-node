#!/usr/bin/env node

const debug = require('debug');
const yargs = require('yargs');

const Overseer = require('../lib/overseer/overseer');

yargs
    .strict()
    .usage('Monitor network services.\nUsage: beaver-overseer -d ./monitor.json')
    .example('beaver-overseer -d ./monitor.json', 'run as daemon')
    .env('BEAVER_OVERSEER')
    .options('d', {
        alias: 'data',
        string: true,
        describe: 'json data',
    }).options('r', {
        alias: 'result',
        string: true,
        describe: 'results file',
    }).options('l', {
        alias: 'log',
        string: true,
        describe: 'log file',
    }).options('i', {
        alias: 'interval',
        default: 10000,
        describe: 'interval between checks, ms',
    }).options('t', {
        alias: 'tcpTimeout',
        default: 5000,
        describe: 'tcp timeout, ms',
    }).options('w', {
        alias: 'webTimeout',
        default: 10000,
        describe: 'web timeout, ms',
    })
    .options('v', {
        alias: 'verbose',
        describe: 'each "v" adds verbosity',
    })
    .options('disableNotify', {
        boolean: true,
        default: true,
        describe: 'disable notification',
    })
    .help('help')
    .count('verbose');

function main(argv) {
    if (!argv.data) {
        yargs.showHelp();
        process.exit();
    }
    const levelOption = argv.v | 0;
    if (levelOption > 0) {
        const debugValue = (process.env.DEBUG ? (['beaver*'].concat(process.env.DEBUG.split(','))).join(',') : 'beaver*');
        process.env.DEBUG = debugValue;
        debug.enable(debugValue);
    }

    Overseer.build(argv);
}

if (!module.parent) {
    main(yargs.argv);
} else {
    module.exports = main;
}
